{{ project.emit_cpp_header_guard_begin(agent.id.name.as_str(), "_IMPL") }}

#include <{{ project.bumpy_case|lower }}/meta/{% if is_team %}teams{% else %}agents{% endif %}/{{ agent.id.bumpy_case|lower }}meta.h>

{{ project.emit_cpp_namespace_begin() }}
/******************************************************************************
 * \class  {{ agent.id.bumpy_case }}
 * \author jackmake
 ******************************************************************************/
class {{ agent.id.bumpy_case }} : public {{ agent.id.bumpy_case }}Meta
{
public:
    /**************************************************************************
     * Constructor/Destructors
     **************************************************************************/
    {{ agent.id.bumpy_case }}(aos::jack::Engine& bdi, std::string_view name);
    {{ agent.id.bumpy_case }}(const {{ agent.id.bumpy_case }}* other, std::string_view name);
    ~{{ agent.id.bumpy_case }}() override {}

    /**************************************************************************
     * Action Handlers
     **************************************************************************/
    {%- for action in workspace.get_actions_used_by_entity(agent.id.as_ref()) %}
    aos::jack::Event::Status on{{ action.id.bumpy_case }}({{ workspace.get_action_cpp_function_prototype_args(action).as_str() }}) override;
    {%- endfor %}
};
{{ project.emit_cpp_namespace_end() }}
{{ project.emit_cpp_header_guard_end(agent.id.name.as_str(), "_IMPL") }}
