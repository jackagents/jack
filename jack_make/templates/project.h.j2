{{ project.emit_cpp_header_guard_begin("PROJECT", "_META") }}

/// JACK
#include <jack/engine.h>

/// Sim
#if defined(JACK_WITH_SIM)
#include <sim/entity.h>
namespace aos::sim { class SimulationBase; class JsonParsedComponent; }
#endif

{{ project.emit_cpp_namespace_begin() }}
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
{%- for agent in model.agents %}
class {{ agent.id.bumpy_case }};
{%- endfor %}

{%- for team in model.teams %}
class {{ team.id.bumpy_case }};
{%- endfor %}

{%- for service in model.services %}
class {{ service.id.bumpy_case }};
{%- endfor %}

/******************************************************************************
 * \class  {{ project.bumpy_case }}
 * \author jackmake
 ******************************************************************************/
class {{ project.bumpy_case }} : public aos::jack::Engine
{
public:
    /**************************************************************************
     * Constructor/Destructors
     **************************************************************************/
    {{ project.bumpy_case }}();
    virtual ~{{ project.bumpy_case }}();

    /**************************************************************************
     * Functions
     **************************************************************************/
    {%- if model.agents.len() > 0 %}
    /// Create an agent and return a handle to the instance.
    {%- for agent in model.agents %}
    aos::jack::AgentHandle create{{ agent.id.bumpy_case }}(std::string_view name, const aos::jack::UniqueId& uuid = aos::jack::UniqueId::random());
    {%- endfor %}

    /// Create an agent and return the pointer to the instance.
    {%- for agent in model.agents %}
    {{ agent.id.bumpy_case }}* create{{ agent.id.bumpy_case }}Instance(std::string_view name, const aos::jack::UniqueId& uuid = aos::jack::UniqueId::random());
    {%- endfor %}
    {%- endif %}

    {%- if model.teams.len() > 0 %}
    /// Create a team and return a handle to the instance.
    {%- for team in model.teams %}
    aos::jack::AgentHandle create{{ team.id.bumpy_case }}(std::string_view name, const aos::jack::UniqueId& uuid = aos::jack::UniqueId::random());
    {%- endfor %}

    /// Create a team and return a pointer to the instance.
    {%- for team in model.teams %}
    {{ team.id.bumpy_case }}* create{{ team.id.bumpy_case }}Instance(std::string_view name, const aos::jack::UniqueId& uuid = aos::jack::UniqueId::random());
    {%- endfor %}
    {%- endif %}

    {%- if model.services.len() > 0 %}
    /// Create a service and return a handle to the instance.
    {%- for service in model.services %}
    aos::jack::ServiceHandle create{{ service.id.bumpy_case }}(std::string_view name, bool proxy, const aos::jack::UniqueId& uuid = aos::jack::UniqueId::random());
    {%- endfor %}

    /// Create a service and return a pointer to the instance.
    {%- for service in model.services %}
    {{ service.id.bumpy_case }}* create{{ service.id.bumpy_case }}Instance(std::string_view name, bool proxy, const aos::jack::UniqueId& uuid = aos::jack::UniqueId::random());
    {%- endfor %}
    {%- endif %}

    /**************************************************************************
     * Static Functions
     **************************************************************************/
    #if defined(JACK_WITH_SIM)
    static void initSimModel(aos::sim::SimulationBase* sim);
    static bool addComponentToEntity(aos::jack::Engine& engine, aos::sim::EntityWrapper entity, std::string_view componentName, const aos::sim::JsonParsedComponent *config);
    #endif /// defined(JACK_WITH_SIM)

    /// The name of the class
    static constexpr inline std::string_view CLASS_NAME = "{{ project.name }}";
};
{{ project.emit_cpp_namespace_end() }}
{{ project.emit_cpp_header_guard_end("PROJECT", "_META") }}
