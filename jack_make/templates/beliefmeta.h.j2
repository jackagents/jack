{{ project.emit_cpp_header_guard_begin(beliefset.id.name.as_str(), "_META") }}

{{ project.emit_cpp_is_automatically_generated_comment() }}

/// Project
{{ beliefset.emit_cpp_includes(workspace) }}
#if defined(JACK_WITH_SIM)
#include <sim/simmath.h>
#include <sim/simjson.h>
#endif

/// JACK
#include <jack/message.h>
#include <jack/messageschema.h>

/// Third Party
#include <nlohmann/json.hpp>
#include <vector>
#include <string_view>

namespace aos::jack
{
class MessageSchema;
}

{{ project.emit_cpp_namespace_begin() }}
class {{ beliefset.id.bumpy_case }} : public aos::jack::Message
{
public:
    /**************************************************************************
     * Constructor/Destructors
     **************************************************************************/
    {{ beliefset.id.bumpy_case }}();

    {%- if beliefset.fields.len() > 0 %}

    {{ beliefset.id.bumpy_case }}(
        {%- for field in beliefset.fields %}
        {%- if field.is_enum() %}
        const {{ field.enum_type() }}& {{ field.bumpy_case }}
        {%- else %}
        const {{ field.to_cpp_type(workspace).unwrap() }}& {{ field.bumpy_case }}
        {%- endif %}
        {%- if !loop.last %},{% endif %}
        {%- endfor %});
    {% endif %}

    /// Create this object by holding onto the pointer to the message. The
    /// lifetime of the message must remain valid throughout the lifetime of
    /// this object when constructed by this API.
    ///
    /// The success of this function can be pre-determined by using this
    /// object's schema and using the verify message API from the schema
    /// beforehand.
    ///
    /// @return If the given message is invalid, e.g. the pointer is null or the
    /// message schema does not match for this type, then a default constructed
    /// {{ beliefset.id.bumpy_case }}.
    /// Otherwise it returns an object constructed from the message.
    /// The valid field of the returned message will be set if the object was
    /// constructed successfully.
    static std::unique_ptr<{{ beliefset.id.bumpy_case }}> createFromPointer(const aos::jack::Message* msg);

    /// return a clone of the message
    std::unique_ptr<aos::jack::Message> clone() const override;

    std::any getField(const std::string& fieldName) const override;
    std::any getFieldPtr(const std::string& fieldName) const override;
    bool setField(const std::string& fieldName, const std::any& value) override;

    bool operator==(const Message& rhs) const override;
    bool operator!=(const Message& rhs) const override;
    
    /// Save to json
    void serialise(nlohmann::json& json) const override;

    /// swap this message for another
    void swap(aos::jack::Message& other) override;

    /// Log the members and values of this beliefset to a string for printing
    std::string toString() const override;

    /**************************************************************************
     * Functions
     **************************************************************************/

    static std::string toStringArray(aos::jack::Span<{{ beliefset.id.bumpy_case }}> array);

    /**************************************************************************
     * Fields
     **************************************************************************/

    {%- for field in beliefset.fields %}
    {%- if field.is_enum() %}
    {{ field.enum_type() }} {{ field.bumpy_case }};
    {%- else %}
    {{ field.to_cpp_type(workspace).unwrap() }} {{ field.bumpy_case }};
    {%- endif %}
    {%- endfor %}

    /**************************************************************************
     * Static
     **************************************************************************/
    /// Convert a std::any that contains this object into a message. If the any
    /// does not contain this object a null pointer is returned.
    static const aos::jack::Message* anyToMessage(const std::any& any);

    /// Convert a std::any that contains an array of this  object into an array
    /// of messages. If the any does not contain this object a null pointer is
    /// returned.
    static std::vector<const aos::jack::Message*> anyArrayToMessage(const std::any& any);

    /// Convert a std::any that contains this object into JSON. If the any
    /// does not contain this object an empty string is returned.
    static std::string anyToJSON(const std::any& any);

    /// Convert a std::any that contains an array of this object into a JSON
    /// array. If the any does not contain this object a null pointer is
    /// returned.
    static std::string anyArrayToJSON(const std::any& any);

    /// Convert a std::any into a nlohmann::json object
    static nlohmann::json anyToNlohmannJSON(const std::any& any);

    /// @todo: Deprecate this for the new message schema
    /// Get this object's message schema containing a description of the fields
    /// that compose this message. The schema can also be used to check if a
    /// JACK message matches this object's schema.
    static const aos::jack::MessageSchema& schema();

    /**************************************************************************
     * Static Fields
     **************************************************************************/
    /// The name of the class
    static constexpr inline std::string_view CLASS_NAME = "{{ beliefset.id.bumpy_case }}";

    /// The name of this object in the JACK model
    static constexpr inline std::string_view MODEL_NAME = "{{ beliefset.id.qualified_name() }}";

    /// An enum for each field in this message. This can be used to have
    /// type-safe index into the schema header's field array for retrieving the
    /// equivalent schema field object.
    enum SchemaField
    {
        {%- for field in beliefset.fields %}
        SchemaField_{{ field.bumpy_case }},
        {%- endfor %}
        SchemaField_COUNT
    };

    /// The schema for this object containing a description of the fields that
    /// compose this message.
    static const aos::jack::MessageSchemaHeader SCHEMA;

    static const aos::jack::MessageSchemaField& schemaField({{ beliefset.id.bumpy_case }}::SchemaField field);

    /**************************************************************************
     * JSON
     **************************************************************************/
    #if defined(JACK_WITH_SIM)
    struct JsonConfig : public aos::sim::JsonParsedComponent
    {
        JsonConfig();

        std::unique_ptr<Message> asMessage() const override final;
        static aos::sim::JsonParsedComponent* parseJson(const nlohmann::json &params);

        {%- for field in beliefset.fields %}
        {%- if field.is_enum() || field.is_custom() %}
        {{ field.to_cpp_json_type(workspace).unwrap() }} {{ field.bumpy_case }} = {};
        {%- else %}
        {{ field.to_cpp_json_type(workspace).unwrap() }} {{ field.bumpy_case }} = {{ field.to_cpp_default(workspace).unwrap() }};
        {%- endif %}
        {%- endfor %}

        {%- if beliefset.fields.len() == 0 %}

        friend void to_json  ([[maybe_unused]]       nlohmann::json &nlohmann_json_j, [[maybe_unused]] const JsonConfig &nlohmann_json_t) { }
        friend void from_json([[maybe_unused]] const nlohmann::json &nlohmann_json_j, [[maybe_unused]]       JsonConfig &nlohmann_json_t) { }
        {%- else %}
        friend void to_json(nlohmann::json& dest, const JsonConfig& src) {
            {%- for field in beliefset.fields %}
            dest["{{ field.name }}"] = src.{{ field.bumpy_case }};
            {%- endfor %}
        }

        friend void from_json(const nlohmann::json& src, JsonConfig& dest) {
            JsonConfig defaultValue = {};
            {%- for field in beliefset.fields %}
            dest.{{ field.bumpy_case }} = src.value("{{ field.name }}", defaultValue.{{ field.bumpy_case }});
            {%- endfor %}
        }
        {%- endif %}
    };
    #endif /// JACK_WITH_SIM

};
void to_json  (      nlohmann::json& dest, const {{ beliefset.id.bumpy_case }}& src);
void from_json(const nlohmann::json& src,        {{ beliefset.id.bumpy_case }}& dest);

std::string format_as(const {{ project.cpp_namespace_string() }}::{{ beliefset.id.bumpy_case }}& val);
std::string format_as(aos::jack::Span<{{ project.cpp_namespace_string() }}::{{ beliefset.id.bumpy_case }}> &val);
{{ project.emit_cpp_namespace_end() }}
{{ project.emit_cpp_header_guard_end(beliefset.id.name.as_str(), "_META") }}
