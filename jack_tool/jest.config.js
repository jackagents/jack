const esModules = [
  '@react-leaflet',
  'react-leaflet',
  '@mui/material',
  '@mui/system',
  '@babel',
  '@mui-extra/icons',
  'leaflet',
  'react',
  'allotment',
  'konva',
  'react-konva',
].join('|');

module.exports = {
  moduleDirectories: ['node_modules', 'release/app/node_modules'],
  moduleFileExtensions: ['js', 'jsx', 'ts', 'tsx', 'json'],
  moduleNameMapper: {
    '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$':
      '<rootDir>/.erb/mocks/fileMock.js',
    '\\.(css|less|sass|scss)$': 'identity-obj-proxy',
    '^main/(.*)$': '<rootDir>/src/main/$1',
    '^misc/(.*)$': '<rootDir>/src/misc/$1',
    '^components/(.*)$': '<rootDir>/src/renderer/components/$1',
    '^constant/(.*)$': '<rootDir>/src/misc/constant/$1',
    '^theme': '<rootDir>/src/misc/theme/Theme.ts',
    '^types/(.*)$': '<rootDir>/src/misc/types/$1',
    '^projectRedux/(.*)$': '<rootDir>/src/redux/$1',
    '^addons/(.*)$': '<rootDir>/src/misc/addons/$1',
    '^projectEvents/(.*)$': '<rootDir>/src/misc/events/$1',
    '^assets/(.*)$': '<rootDir>/assets/$1',
    '^imgs': '<rootDir>/src/renderer/images/index.ts',
    '^rendererUtils': '<rootDir>/src/misc/utils/common/rendererUtils.ts',
    '^hooks/(.*)$': '<rootDir>/src/misc/hooks/$1',
    '^listeners/(.*)$': '<rootDir>/src/main/listeners/$1',
    '^package.json': '<rootDir>/package.json',
    '^srcRoot/(.*)$': '<rootDir>/src/$1',
    '^root/(.*)$': '<rootDir>/$1',
    '^canvas': 'jest-canvas-mock',
    '^(\\.{1,2}/.*)\\.js$': '$1',
  },
  setupFiles: [
    './.erb/scripts/check-build-exists.ts',
    './mocks/resizeObserverPolyfill.js',
    './mocks/mockkonva.js',
    'jsdom-worker',
  ],
  testEnvironment: 'jsdom',
  testEnvironmentOptions: {
    url: 'http://localhost/',
  },
  roots: ['<rootDir>'],
  testPathIgnorePatterns: ['release/app/dist'],
  preset: 'ts-jest',
  resolver: 'ts-jest-resolver',
  coverageDirectory: 'coverage',
  collectCoverageFrom: ['src/**/*.{ts,tsx,js,jsx}', '!src/**/*.d.ts'],
  transformIgnorePatterns: [`node_modules/(?!${esModules})`],
  transform: {
    '^.+\\.(ts|tsx)?$': 'ts-jest',
    '^.+\\.(mjs|cjs|js|jsx)?$': 'babel-jest',
  },
  globals: {
    'ts-jest': {
      diagnostics: false,
      useESM: true,
    },
  },
  extensionsToTreatAsEsm: ['.ts'],
};
