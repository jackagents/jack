export const request = {
  window: {
    minimize: 'window-minimize',
    maximize: 'window-maximize',
    close: 'window-close',
  },
  startApp: 'landing-start-app',
  project: {
    new: 'project-new',
    open: 'project-open',
    update: 'project-update',
    saveAll: 'save-all',
    runMatLab: 'run-mat-lab',
    prompt: 'prompt',
    saveCSV: 'save-csv',
    projectFolder: 'project-folder',
    startApplication: 'start-app',
    openFolder: 'open-folder',
    runExecute: 'run-execute',
    lockAll: 'lock-all',
    unlockAll: 'unlock-all',
    contextmenu: 'context-menu',
    about: 'project-about',
    satellite: 'project-satellite-map-api',
    streetView: 'project-street-view-map-api',
    createPointOfInterest: 'project-create-poi',
    createZone: 'project-create-zone',
    undoZone: 'project-undo-zone',
    saveInfo: 'request-save-info',
  },
  dds: {
    subscribe: 'dds-subscribe',
  },
  heatmap: {
    predict: 'request-heatmap-predict',
  },
  websocket: {
    connect: 'request-connect-websocket',
    disconnect: 'request-disconnect-websocket',
    send: 'request-send-cbdi-message',
    status: 'request-ws-status',
  },
  cbdi: {
    getEditModel: 'request-get-edit-model',
    setEditModel: 'request-set-edit-model',
    agentUpdated: 'agent-model-updated',
    nodeInfo: 'request-cbdi-node-info',
    agentModel: 'request-ws-agent-model',
    discoverModels: 'request-ws-discover-models',
    getIntentionByAgentGoalId: 'request-intention-by-agent-goal-id',
    reset: 'request-cbdi-explainability-reset',
    inspectPlanGoalIdChanged: 'inspect-plan-goal-id-changed',
  },
  bdilog: {
    agentSummaryIntentionInfo: 'request-agent-summary-intention-info',
    logs: 'request-cbdi-logs',
    intentionOverviews: 'request-cbdi-intention-overviews',
    intentionTasksByIds: 'request-cbdi-intention-tasks-ids',
  },
  playback: {
    openFile: 'request-cbdi-editor-playback-open-file',
    resetFile: 'request-cbdi-editor-playback-reset-file',
    play: 'request-cbdi-editor-playback-play',
    pause: 'request-cbdi-editor-playback-pause',
    stop: 'request-cbdi-editor-playback-stop',
    goToFrame: 'request-cbdi-editor-go-to-frame',
    goLive: 'request-cbdi-editor-go-live',
    switchXaiLivePlayback: 'request-cbdi-edit-switch-xai-live-playback',
    debug: {
      enter: 'request-cbdi-edit-debug-mode-enter',
      exit: 'request-cbdi-edit-debug-mode-exit',
      stepNext: 'request-cbdi-edit-debug-mode-step-next',
      autoPlay: 'request-cbdi-edit-debug-mode-auto-play',
      autoPlayPause: 'request-cbdi-edit-debug-mode-auto-play-pause',
    },
  },
};

export const response = {
  window: {
    maximized: 'window-maximized',
    resized: 'window-resized',
    setMainWindowId: 'response-mainwindow-started',
    setAppLoading: 'response-set-app-loading',
    setAppLoadingPercentage: 'response-set-app-loading-percentage',
  },
  project: {
    changed: 'project-changed',
    saved: 'project-saved',
    closed: 'project-closed',
    prompt: 'project-prompt',
    loaded: 'project-loaded',
    saveCSV: 'project-save-csv',
    projectFolder: 'project-open-folder',
    outputResult: 'output-result',
    lockAll: 'project-lock-all',
    unlockAll: 'project-unlock-all',
    contextmenu: 'response-context-menu',
    createPointOfInterest: 'response-create-poi',
    createZone: 'response-project-create-zone',
    undoZone: 'response-project-undo-zone',
    saveInfo: 'response-save-info',
  },
  heatmap: {
    predict: 'response-heatmap-predict',
  },
  ddsEvent: {
    register: 'dds-event-register',
    agentJoinTeam: 'dds-event-agentjointeam',
    delegation: 'dds-event-delegation',
    control: 'dds-event-control',
    onDataAvailable: 'dds-event-data-available',
  },
  websocket: {
    connected: 'response-connect-websocket',
    disconnected: 'response-disconnect-websocket',
    send: 'response-send-cbdi-message',
    status: 'response-ws-status',
  },
  cbdi: {
    editModel: 'response-edit-model',
    agentUpdated: 'agent-model-updated',
    nodeInfo: 'response-websocket-node-info',
    nodeModel: 'response-websocket-nodeMode',
    agentModel: 'response-ws-agent-model',
    getIntentionForNotificationById: 'response-intention-for-notification-by-id',
  },
  bdilog: {
    agentSummaryIntentionInfo: 'response-agent-summary-intention-info',
    intentionOverviews: 'response-bdilog-intention-overviews',
    logs: 'response-bdilog-logs',
    intentionTasksByIds: 'request-cbdi-intention-tasks-ids',
  },
  playback: {
    openFile: 'response-cbdi-editor-playback-open-file',
    resetFile: 'response-cbdi-editor-playback-reset-file',
    play: 'response-cbdi-editor-playback-play',
    pause: 'response-cbdi-editor-playback-pause',
    stop: 'response-cbdi-editor-playback-stop',
    tick: 'reponse-playback-tick',
    goToFrame: 'reponse-cbdi-editor-go-to-frame',
    goLive: 'reponse-cbdi-editor-playback-go-live',
    feedLiveProgress: 'response-cbdi-editor-playback-feed-live-progress',
    stale: 'response-cbdi-editor-playback-feed-live-progress-stale',
    inspectingIntentionUnavailable: 'response-inspecting-intention-unavailable',
    switchXaiLivePlayback: 'request-cbdi-edit-switch-xai-live-playback',
    commandFrontendPause: 'command-frontend-pause',
  },
};

export const eventListeners = {
  cbdi: {
    nodeInfo: 'event-listener-websocket-node-info',
    modelUpdated: 'event-listener-agent-model-updated',
    inspectedPlanIntentionChanged: 'inspecting-plan-intention-changed',
  },
  playback: {
    commandFrontendPausePlayback: 'event-listener-command-frontend-pause-playback',
  },
};

export type AOSIpcReqEvent = typeof request;
export type AOSIpcResEvent = typeof response;
